name: matterhorn
base: core22
adopt-info: matterhorn
summary: Matterhorn
description: |
  A feature-rich Unix terminal client for the Mattermost chat system

  See https://snapcraft.io/matterhorn for more information how to configure and
  use it.
source-code: https://github.com/3v1n0/matterhorn-snap
grade: stable
confinement: strict

apps:
  matterhorn:
    command: bin/matterhorn
    plugs:
      - home
      - desktop
      - network
      - password-manager-service
      - x11
    environment:
      LANG: C.UTF-8
      EDITOR: $SNAP/usr/bin/nvim # Would be nice to be able to use the host $EDITOR

layout:
  /usr/libexec/neovim:
    bind: $SNAP/usr/libexec/neovim
  /usr/share/nvim:
    bind: $SNAP/usr/share/nvim
  /usr/lib/aspell:
    bind: $SNAP/usr/lib/aspell
  /usr/share/aspell:
    bind: $SNAP/usr/share/aspell
  /etc/dictionaries-common:
    bind: $SNAP/etc/dictionaries-common
  /usr/share/dict:
    bind: $SNAP/usr/share/dict
  /var/cache/dictionaries-common:
    bind: $SNAP/var/cache/dictionaries-common
  /var/lib/dictionaries-common:
    bind: $SNAP/var/lib/dictionaries-common
  /var/lib/aspell:
    bind: $SNAP/var/lib/aspell
  /var/lib/ispell:
    bind: $SNAP/var/lib/ispell

parts:
  matterhorn:
    source: https://github.com/matterhorn-chat/matterhorn.git
    plugin: nil
    override-pull: |
      cabal --version
      cabal -j${CRAFT_PARALLEL_BUILD_COUNT} update
      cabal -j${CRAFT_PARALLEL_BUILD_COUNT} new-install Cabal cabal-install \
        --installdir=/usr/local/bin

      # FIXME: We need a way to make snapcraft not to use --recursive, but
      # We keep the source and branch stuff for future and to get git deps
      # craftctl default
      GIT_TAG="50200.19.0"
      git clone --bare https://github.com/matterhorn-chat/matterhorn.git \
        "${CRAFT_PART_SRC}/.git"
      git -C ${CRAFT_PART_SRC} config --unset core.bare
      git -C ${CRAFT_PART_SRC} checkout ${GIT_TAG}

      sed -i -e /url/s,git@github.com:,https://github.com/, ${CRAFT_PART_SRC}/.gitmodules
      git -C ${CRAFT_PART_SRC} submodule update --init
      for p in "${CRAFT_PROJECT_DIR}"/patches/*; do
        (cd "${CRAFT_PART_SRC}" && patch -p1 < "$p")
      done
    override-build: |
      set -eu
      export LANG=C.UTF-8
      export CABALARGS="-j${CRAFT_PARALLEL_BUILD_COUNT}"

      cd "${CRAFT_PART_BUILD}"
      bash -x ./scripts/local-mkrelease.sh

      TAR=$(ls matterhorn-*.tar.* -1)
      echo "Unpacking ${TAR}..."
      mkdir -p "${CRAFT_PART_INSTALL}/app"
      tar jxvf "${TAR}" -C "${CRAFT_PART_INSTALL}/app" --strip-components=1
      install -m 755 ${CRAFT_PROJECT_DIR}/launcher -D ${CRAFT_PART_INSTALL}/bin/matterhorn -v
      rm -f "${TAR}"

      craftctl set version="$(git describe --tags)"
    build-packages:
      - cabal-install
      - ghc
      - zlib1g-dev
    stage-packages:
      - libatomic1

  integration-tools:
    plugin: nil
    stage-packages:
      - libsecret-tools
      - libnotify-bin
      - jq
      - neovim
      - xclip
    override-build: |
      craftctl default

      install -m 755 ${CRAFT_PROJECT_DIR}/secret-tool.wrapper \
        -D ${CRAFT_PART_INSTALL}/usr/sbin/secret-tool -v

  dictionaries:
    plugin: nil
    stage-packages:
      - aspell
      - aspell-en
      - aspell-am
      - aspell-ar
      - aspell-bg
      - aspell-bn
      - aspell-br
      - aspell-ca
      - aspell-cs
      - aspell-cy
      - aspell-da
      - aspell-de
      - aspell-de-1901
      - aspell-el
      - aspell-eo
      - aspell-eo-cx7
      - aspell-es
      - aspell-et
      - aspell-eu
      - aspell-fa
      - aspell-fo
      - aspell-fr
      - aspell-ga
      - aspell-gl-minimos
      - aspell-gu
      - aspell-he
      - aspell-hi
      - aspell-hr
      - aspell-hsb
      - aspell-hu
      - aspell-hy
      - aspell-is
      - aspell-it
      - aspell-kk
      - aspell-kn
      - aspell-ku
      - aspell-lt
      - aspell-lv
      - aspell-ml
      - aspell-mr
      - aspell-nl
      - aspell-no
      - aspell-nr
      - aspell-ns
      - aspell-or
      - aspell-pa
      - aspell-pl
      - aspell-pt
      - aspell-pt-br
      - aspell-pt-pt
      - aspell-ro
      - aspell-ru
      - aspell-sk
      - aspell-sl
      - aspell-ss
      - aspell-st
      - aspell-sv
      - aspell-ta
      - aspell-te
      - aspell-tl
      - aspell-tn
      - aspell-ts
      - aspell-uk
      - aspell-uz
      - aspell-xh
      - aspell-zu
      - aspell-af
      - aspell-id
    override-build: |
      set -eu
      craftctl default

      aspell_dicts_path=${CRAFT_PART_INSTALL}/usr/lib/aspell

      function fix_absolute_links() {
        for i in "$aspell_dicts_path"/*.rws; do
          if [ -L "$i" ]; then
            local lnk=$(readlink "$i");
            if [[ "$lnk" == /* ]]; then
              if [[ "$lnk" != "${CRAFT_PART_INSTALL}"* ]]; then
                lnk="${CRAFT_PART_INSTALL}/$lnk"
                ln -sfv "$lnk" "$i"
              fi
              local rel_lnk="$(realpath --relative-to="$aspell_dicts_path" "$i")"
              ln -sfv "$rel_lnk" "$i"
            fi
          fi
        done
      }

      function ensure_compat_files() {
        local vardir="${CRAFT_PART_INSTALL}/var/lib/aspell"
        for i in "$aspell_dicts_path"/*.dat; do
          local lang="$(basename "$i" .dat)"
          local compat="$vardir/$lang.compat"

            if [ ! -e "$compat" ]; then
              mkdir -p "$vardir"
              touch "$compat"
            fi
        done
      }

      aspell_autobuildhash="$(command -v aspell-autobuildhash)"
      update_dictcommon_aspell="$(command -v update-dictcommon-aspell)"
      sed -i "s,\([\"']\)/\(usr\|var\|etc\)/,\1${CRAFT_PART_INSTALL}/\2/,g" \
        "${CRAFT_PART_INSTALL}/usr/share/perl5/Debian/DictionariesCommon.pm" \
        "$aspell_autobuildhash" \
        "$update_dictcommon_aspell"
      sed -i '/dico_checkroot.*s()/d' \
        "$aspell_autobuildhash" \
        "$update_dictcommon_aspell"

      # export DICT_COMMON_DEBUG=1
      export PERL5LIB=${CRAFT_PART_INSTALL}/usr/share/perl5

      ensure_compat_files
      "$update_dictcommon_aspell"
      "$aspell_autobuildhash"
      fix_absolute_links

    build-packages:
      - dictionaries-common
      - libaspell15
    stage:
      - -usr/sbin
      - -usr/**/perl5
      - -usr/share/aspell

  cleanup:
    after:
      - dictionaries
      - integration-tools
      - matterhorn
    plugin: nil
    build-snaps: [core20]
    override-prime: |
      set -eux
      build_snaps=core20
      for snap in $build_snaps; do
        cd "/snap/$snap/current" && \
        find . -type f,l -exec rm -fv "$CRAFT_PRIME/{}" "$CRAFT_PRIME/usr/{}" \;
      done
      for CRUFT in bug lintian man; do
        rm -rf $CRAFT_PRIME/usr/share/$CRUFT
      done
      find $CRAFT_PRIME/usr/share/doc/ -type f -not -name 'copyright' -delete
      find $CRAFT_PRIME/usr/share -type d -empty -delete
      find $CRAFT_PRIME/usr -type d -name perl5 -exec rm -frv "{}" \;
      rm -rf $CRAFT_PRIME/usr/share/man
